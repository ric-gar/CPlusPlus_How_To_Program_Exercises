File name: Chapter_6_Exercises.txt
Author: Ricardo Garcia
Book: C++ How to Program 10th Edition by Paul Deitel and Harvey Deitel
Description: Chapter 6 Exercises

6.1
a) functions, classes
b) function call
c) local variable
d) return
e) void
f) scope
h) function prototype
i) rand
j) srand
k) global
l) static
m) recursive
n) base
o) overloading
p) unary scope resolution operator (::)
q) const
r) template

6.2
a) block scope
b) block scope
c) global namespace scope
d) global namespace scope
e) global namespace scope

6.3
See Chapter_6 folder for source code.

6.4
a) double hypotenuse(double side1, double side2)
b) int smallest(int x, int y, int z)
c) void instructions()
d) double intToDouble(int number)

6.5
a) double hypotenuse(double, double);
b) int smallest(int, int, int);
c) void instructions();
d) double intToDouble(int);

6.6
static double lastVal;

6.7
a) Define h() outside of g().
void g() {
	cout << "Inside function g" << endl;
}
void h() {
	cout << "Inside function h" << endl;
}

b) Missing return statement
int sum(int x, int y) {
	int result{0};
	result = x + y;
	return result;
}

c) Missing return statement in else.
int sum(int n) {
	if (0 == n)
		return 0;
	else
		return n + sum(n - 1);
}

d) float variable is displayed instead of the double varaible. This occurs because
   of scope issues with local variables. Also, remove semicolon after the function 
   header.
void f(double a) {
	cout << a << endl;
}

e) Function should have return type int instead of void.
int product() {
	int a{0};
	int b{0};
	int c{0};
	cout << "Enter three integers: ";
	cin >> a >> b >> c;
	int result{a * b * c};
	cout << "Result is " << result;
	return result;
}

6.8
This is a function parameter that passes a variable by reference.

6.9
False. Some arguments are passed by reference.

6.10
See Exercise_6.10 folder for source code.

6.11
a) 7.5
b) 7
c) 0
d) 0
e) 6.4
f) -6
g) -14

6.12
See Exercise_6.12 folder for source code.

6.13
See Exercise_6.13 folder for source code.

6.14
See Exercise_6.14 folder for source code.

6.15
a) Choosing numbers at random means every number in its range has an equal chance
(or probability) of being chosen.
b) The rand function is useful for similuating games of chance because it allows
programmers to randomly generate numbers in a specific range. These numbers have an
equal likelihood of being generated.
c) You would randomize a program using srand becaus it will generate a different set
of randomized during each program execution. Otherwise, the random numbers are
predictable. During testing or debugging, it is desirable not to randomize.
d) it is necessary to scale or shift the values produced by rand because, by
default, they generate values from to to RAND_MAX.
e) Computerized simulation of real-world situations is a useful technique because
it allows programmers to study the behavior in a controlled environment.

6.16
a) n = 1 + rand() % 2;
b) n = 1 + rand() % 100;
c) n = rand() % 10;
d) n = 1000 + rand() % 113;
e) n = -1 + rand() % 3;
f) n = -3 + rand() % 15;

6.17
a) n = (rand() % 5 * 2) + 2;
b) n = (rand() % 5 * 2) + 3;
c) n = (rand() % 5 * 4) + 6;

6.18
int integerPower(int base, int exponent) {
	unsigned int result{1};

	for (unsigned int count{1}; count <= exponent; ++count)
		result *= base;

	return result;
}

6.19
double hypotenuse(double side1, double side2) {
	return sqrt(side1 * side1 + side2 * side2);
}

Trinagle #1 hypotenuse: 5
Triangle #2 hypotenuse: 13
Triangle #3 hypotenuse: 17

6.20
bool isMultiple(int num1, int num2) {
	if (num2 % num1 == 0)
		return true;
	else // num2 % num1 != 0
		return false;
}

6.21
#include <iostream>

bool isEven(int num1) {
	if (num1 % 2 == 0)
		return true;
	else // num2 % num1 != 0
		return false;
}

int main() {
	for (int count{ 0 }; count <= 20; ++count)
		std::cout << count << " is " << (isEven(count) ? "even" : "odd") << '\n';
	return 0;
}

6.22
void squareAsterisks(int side) {
	for (unsigned int outerCounter{ 1 }; outerCounter <= side; ++outerCounter) {
		for (unsigned int innerCounter{ 1 }; innerCounter <= side; ++innerCounter)
			std::cout << '*';
		std::cout << '\n';
	}
}

6.23
void squareAsterisks(int side, char fillCharacter) {
	for (unsigned int outerCounter{ 1 }; outerCounter <= side; ++outerCounter) {
		for (unsigned int innerCounter{ 1 }; innerCounter <= side; ++innerCounter)
			std::cout << fillCharacter;
		std::cout << '\n';
	}
}

6.24
a) quotient = a / b;
b) remainder = a % b;
c) 
void separatingDigits(int number) {
	
	unsigned int digits{ 0 };

	// calculate how many digits in number
	if (number >= 10000 && number < 100000)
		digits = 5;
	else if (number >= 1000 && number < 10000)
		digits = 4;
	else if (number >= 100 && number < 1000)
		digits = 3;
	else if (number >= 10 && number < 100)
		digits = 2;
	else if (number >= 1 && number < 10)
		digits = 1;
	else {
		std::cout << "Error in separatingDigits(number)";
		digits = 0;
	}

	// separate digits
	for (unsigned int count{ digits }; count >= 1; --count) {
		std::cout << number / static_cast<int>(pow(10, count - 1)) << "  ";
		number = number % static_cast<int>(pow(10, count - 1));
	}

}

6.25
See Exercise_6.25 for source code.

6.26
See Exercise_6.26 for source code.

6.27
See Exercise_6.27 for source code.

6.28
See Exercise_6.28 for source code.

6.29
See Exercise_6.29 folder for source code.
a)
// Determine if a number is prime
bool isPrime(int number) {
	
	// Loop from 2 to number
	for (unsigned int count{ 2 }; count < number; ++count) {
		
		// return false if number is not prime
		if (number % count == 0)
			return false;
	}

	// number is prime return true
	return true;
}

b) For my program, all the numbers need to checked from to 2 to 10,000 before it can
be determined that a number is prime. However, the function exits once a divisor for
a potential prime number is found.

c) Only need to check as high as the sqrt(n) because checking any number larger than
the sqrt(n) must have a factor that is smaller than sqrt(n). Therefore, only
checking up to sqrt(n) is necessary. The performance improvement is exponential.
For example, checking if 10,000 is prime only requires 100 numbers to check.

6.30
// Iterative version to reverse digits of an integer
int reverseDigitsIterative(int number) {

	int reverseDigits{ 0 }; // reversed integer value

	// loop until no more digits to reverse
	while (number > 0) {

		// calculate reversing digits
		reverseDigits = (reverseDigits * 10) + (number % 10);
		number /= 10; // terminates loop
	}

	return reverseDigits;
}

// Recursive version of reversing digits of a number
int reverseDigitsRecursive(int number) {
	
	// base case
	if (number < 10)
		return number;
	
	int temp{ number }; // duplicate number variable
	unsigned int digits{ 0 }; // number of digits

	// calculate number of digits
	while (temp > 10) {
		temp /= 10; // terminates loop
		digits++;
	}

	// Recursive call
	return reverseDigitsRecursive(number / 10) + (number % 10) * pow(10, digits);
}

6.31
// Iterative greatest common divisor 
int gcdIterative(int n1, int n2) {
	
	// Swap largest value to n1
	if (n2 > n1) {
		int temp{ n1 };
		n1 = n2;
		n2 = temp;
	}

	int gcd{ 0 }; // holds gcd value

	// Loop from 1 to (n1 / 2).
	// Count beyond (n1 / 2) repeats factors
	for (unsigned int count{ 1 }; count <= (n1 / 2); ++count) {

		// calculate gcd
		if (n1 % count == 0 && n2 % count == 0)
			gcd = count;
	}

	return gcd;
}

6.32
// Calculates the student's GPA score
int qualityPoints() {

	// Prompt user and read input
	std::cout << "Enter student's average: ";
	unsigned int studentAverage{ 0 };
	std::cin >> studentAverage;

	// Return appropriate GPA score
	if (studentAverage >= 90 && studentAverage <= 100)
		return 4;
	else if (studentAverage >= 80 && studentAverage <= 89)
		return 3;
	else if (studentAverage >= 70 && studentAverage <= 79)
		return 2;
	else if (studentAverage >= 60 && studentAverage <= 69)
		return 1;
	else if (studentAverage >= 0 && studentAverage <= 59)
		return 0;
	else { // error message
		std::cout << "Error in qualityPoints()";
		return 404;
	}
}

6.33
See Exercise_6.33 folder for source code.

6.34
See Exercise_6.34 folder for source code.

6.35
See Exercise_6.35 folder for source code.
If we guess between the highest possible value and lowest possible value for every
guess, then we eliminate half of the numbers for every guess. This is equivalent
to 10 / (2^10) = 0.9765625 or approximately 1. Therefore, with 10 guesses we should
be able to guess the number at the worst case; best case we guess before 10 tries.

6.36
See Exercise_6.36 folder for source code.
int power(int base, int exponent) {

	if (exponent == 1)
		return base;
	else
		return base * power(base, exponent - 1);
}

6.37
See Exercise_6.37 folder for source code.
unsigned long fibonacci(unsigned long number) {

	// Return number for base cases n = 0 or n = 1
	if (number == 0 || number == 1)
		return number;

	// Calculate fibonacci
	else {

		unsigned long nMinus1{ 1 }; // f(n - 1)
		unsigned long nMinus2{ 0 }; // f(n - 2)
		unsigned long fibNum{ 0 }; // f(n)
		
		// loop from 2 to f(number)
		for (unsigned int n{ 2 }; n <= number; n++) {
			
			// calculate f(n)
			fibNum = nMinus1 + nMinus2;
			nMinus2 = nMinus1; // update f(n-2)
			nMinus1 = fibNum; // update f(n - 1)
		}
		
		return fibNum; // return fibonacci number
	}
}

6.38
See Exercise_6.38 folder for source code.
void towersOfHanoi(unsigned int disks, unsigned int initial, unsigned int destination, unsigned int holding) {

	if (1 == disks) {
		std::cout << initial << " -> " << destination << '\n';
		return;
	}

	towersOfHanoi(disks - 1, initial, holding, destination);
	towersOfHanoi(1, initial, destination, holding);
	towersOfHanoi(disks - 1, holding, destination, initial);
}

6.39
See Exercise_6.39 folder for source code.
The recursion may suffer from performance issues because of overhead. However, the
recursive solution is elegant and easier to demonstrate the correctness. The
iterative version has less overhead, but is a cumbersome program and more difficult
to understand.

6.40
See Exercise_6.40 folder for source code.

6.41
// Recursive GCD function
int gcdRecursive(int n1, int n2) {

	// Swap largest value to n1
	if (n2 > n1) {
		int temp{ n1 };
		n1 = n2;
		n2 = temp;
	}

	// base case
	if (n2 == 0)
		return n1;
	// recursive call
	else
		return gcdRecursive(n2, n1 % n2);
}

6.42
double distance(double x1, double y1, double x2, double y2) {
	return sqrt(pow(x2 - x1, 2) + pow(y2 - y1, 2));
}

6.43
Multiplies two numbers and returns the result.

6.44
int mystery(int a, int b) {
	if (1 == b)
		return a;
	else if (-1 == b)
		return -a;
	else if (b > 0)
		return a + mystery(a, b - 1);
	else // b < 0
		return -a + mystery(a, b + 1);
}

6.45
See Exercise_6.45 folder for source code.

6.46
a) Missing return type for function definition.
float cube(float number) {
	return number * number * number;
}

b)srand() missing seed.
int randomNumber{ srand(0) };

c) Narrowing conversion from y to x. Change x to floating-point variable.
float y{ 123.45678 };
float x;
x = y;
cout << x << endl;

d) Local number variable will cause function to return 0 * 0 instead of
number * number.

double square( double number ) {
	double number{ 0 };
	return number * number;
}

e) Inifinite recursion because the value of n never changes when passed recursively.
int sum(int n) {
	if ( 0 == n )
		return 0;
	else
		return n + sum(n - 1);
}

6.47
See Exercise_6.47 folder for source code.

6.48
#include <iostream>

inline double circleArea(double radius) {
	return 3.1415926 * radius * radius;
}

int main() {

	std::cout << "Enter the radius of a circle: ";
	double area;
	std::cin >> area;

	std::cout << "Area of a circle: " << circleArea(area);

	return 0;
}

6.49
Passing by reference removes the return statement and allows the assignment to occur
in the function instead of when the function call returns. However, it doesn't allow
the function to be called in a output statement.

#include <iostream>

int tripleByValue(int count) {
	return 3 * count;
}

void tripleByReference(int& count) {
	count *= 3;
}

int main() {

	int count{ 9 };
	count = tripleByValue(count);
	std::cout << count << '\n';

	count = 9;
	tripleByReference(count);
	std::cout << count << '\n';

	return 0;
}

6.50
C++ provides the unary scope resolution operator to access a global variable when a
local variable of the same name is in scope.

6.51
#include <iostream>

template <typename T>
T minimum(T value1, T value2) {
	if (value1 < value2)
		return value1;
	else
		return value2;
}

int main() {

	std::cout << "Minimum of 6 and -5 is " << minimum(6, -5) << '\n';
	std::cout << "Minimum 'm' and 'a' is " << minimum('m', 'a') << '\n';
	std::cout << "Minimum 3.1415 and 5.1678 is " << minimum(5.1678, 3.1415) << '\n';

	return 0;
}

6.52
#include <iostream>

template <typename T>
T maximum(T value1, T value2) {
	if (value1 > value2)
		return value1;
	else
		return value2;
}

int main() {

	std::cout << "maximum of 6 and -5 is " << maximum(6, -5) << '\n';
	std::cout << "maximum 'm' and 'a' is " << maximum('m', 'a') << '\n';
	std::cout << "maximum 3.1415 and 5.1678 is " << maximum(5.1678, 3.1415) << '\n';

	return 0;
}

6.53
a) Replace int with A
template <typename A>
A sum(A num1, int num2, int num3) {
	return numb1 + num2 + num3;
}

b) Should be return type int instead of void.
int printResults(int x, int y) {
	cout << "The sum is " << x + y << '\n';
	return x + y;
}

c) Missing typename
template<typename A>
A product(A num1, A num2, A num3) {
	return num1 * num2 * num3;
}

d) Overloading functions can't have the same parameter types.
double cube(double);
int cube(int);

6.54
See Exercise_6.54 folder for source code.

6.55
enum class AccountType { SAVINGS, CHECKING, INVESTMENT };

6.56
A function definition includes the name, return type, parameters and the body.
Function prototypes exclude the body and the parameters name are not required; the
parameters type is required.

6.57
See Exercise_6.57 for source code.

6.58
See Exercise_6.58 for source code.

6.59
See Exercise_6.59 for source code.

6.60
See Exercise_6.60 for source code.

6.61
See Exercise_6.61 for source code.